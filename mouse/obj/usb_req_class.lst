C51 COMPILER V9.01   USB_REQ_CLASS                                                         08/19/2023 22:41:15 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE USB_REQ_CLASS
OBJECT MODULE PLACED IN .\obj\usb_req_class.obj
COMPILER INVOKED BY: D:\software\keil4.0\C51\BIN\C51.EXE src\usb_req_class.c BROWSE DEBUG OBJECTEXTEND PRINT(.\obj\usb_r
                    -eq_class.lst) OBJECT(.\obj\usb_req_class.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include "stc.h"
  14          #include "usb.h"
  15          #include "usb_req_class.h"
  16          
  17          BYTE bHidIdle;
  18          BYTE bKeyCode = 0;
  19          BYTE bKeyDebounce = 0;
  20          BOOL fKeyOK;
  21          
  22          void usb_req_class()
  23          {
  24   1          switch (Setup.bRequest)
  25   1          {
  26   2          case GET_REPORT:
  27   2              usb_get_report();
  28   2              break;
  29   2          case SET_REPORT:
  30   2              usb_set_report();
  31   2              break;
  32   2          case GET_IDLE:
  33   2              usb_get_idle();
  34   2              break;
  35   2          case SET_IDLE:
  36   2              usb_set_idle();
  37   2              break;
  38   2          case GET_PROTOCOL:
  39   2              usb_get_protocol();
  40   2              break;
  41   2          case SET_PROTOCOL:
  42   2              usb_set_protocol();
  43   2              break;
  44   2          default:
  45   2              usb_setup_stall();
  46   2              return;
  47   2          }
  48   1      }
  49          
  50          void usb_get_report()
  51          {
  52   1          if ((DeviceState != DEVSTATE_CONFIGURED) ||
  53   1              (Setup.bmRequestType != (IN_DIRECT | CLASS_REQUEST | INTERFACE_RECIPIENT)))
  54   1          {
C51 COMPILER V9.01   USB_REQ_CLASS                                                         08/19/2023 22:41:15 PAGE 2   

  55   2              usb_setup_stall();
  56   2              return;
  57   2          }
  58   1      
  59   1          Ep0State.pData = UsbBuffer;
  60   1          Ep0State.wSize = Setup.wLength;
  61   1      
  62   1          usb_setup_in();
  63   1      }
  64          
  65          void usb_set_report()
  66          {
  67   1          if ((DeviceState != DEVSTATE_CONFIGURED) ||
  68   1              (Setup.bmRequestType != (OUT_DIRECT | CLASS_REQUEST | INTERFACE_RECIPIENT)))
  69   1          {
  70   2              usb_setup_stall();
  71   2              return;
  72   2          }
  73   1      
  74   1          Ep0State.pData = UsbBuffer;
  75   1          Ep0State.wSize = Setup.wLength;
  76   1      
  77   1          usb_setup_out();
  78   1      }
  79          
  80          void usb_get_idle()
  81          {
  82   1          if ((DeviceState != DEVSTATE_CONFIGURED) ||
  83   1              (Setup.bmRequestType != (IN_DIRECT | CLASS_REQUEST | INTERFACE_RECIPIENT)))
  84   1          {
  85   2              usb_setup_stall();
  86   2              return;
  87   2          }
  88   1      
  89   1          Ep0State.pData = &bHidIdle;
  90   1          Ep0State.wSize = 1;
  91   1      
  92   1          usb_setup_in();
  93   1      }
  94          
  95          void usb_set_idle()
  96          {
  97   1          if ((DeviceState != DEVSTATE_CONFIGURED) ||
  98   1              (Setup.bmRequestType != (OUT_DIRECT | CLASS_REQUEST | INTERFACE_RECIPIENT)))
  99   1          {
 100   2              usb_setup_stall();
 101   2              return;
 102   2          }
 103   1      
 104   1          bHidIdle = Setup.wValueH;
 105   1      
 106   1          usb_setup_status();
 107   1      }
 108          
 109          void usb_get_protocol()
 110          {
 111   1          usb_setup_stall();
 112   1      }
 113          
 114          void usb_set_protocol()
 115          {
 116   1          usb_setup_stall();
C51 COMPILER V9.01   USB_REQ_CLASS                                                         08/19/2023 22:41:15 PAGE 3   

 117   1      }
 118          
 119          void usb_class_in()
 120          {
 121   1          BYTE button[3];
 122   1          BYTE i;
 123   1              
 124   1          if (DeviceState != DEVSTATE_CONFIGURED)
 125   1              return;
 126   1      
 127   1          if (!UsbInBusy && fKeyOK)
 128   1          {
 129   2              fKeyOK = 0;
 130   2      
 131   2              button[0] = 0;
 132   2              button[1] = 0;
 133   2              button[2] = 0;
 134   2      
 135   2              switch (bKeyCode)
 136   2              {
 137   3              case 0xfe:  button[0] = 0x01; break;
 138   3              case 0xfd:  button[0] = 0x04; break;
 139   3              case 0xfb:  button[0] = 0x02; break;
 140   3              case 0xef:  button[1] = 0xfc; break;
 141   3              case 0xdf:  button[1] = 0x04; break;
 142   3              case 0xbf:  button[2] = 0xfc; break;
 143   3              case 0x7f:  button[2] = 0x04; break;
 144   3              }
 145   2              
 146   2              IE2 &= ~0x80;   //EUSB = 0;
 147   2              UsbInBusy = 1;
 148   2              usb_write_reg(INDEX, 1);
 149   2              for (i=0; i<3; i++)
 150   2              {
 151   3                  usb_write_reg(FIFO1, button[i]);
 152   3              }
 153   2              usb_write_reg(INCSR1, INIPRDY);
 154   2              IE2 |= 0x80;    //EUSB = 1;
 155   2          }
 156   1      }
 157          
 158          void scan_key()
 159          {
 160   1          BYTE key;
 161   1          
 162   1          P0M0 = 0x00;
 163   1          P0M1 = 0x00;
 164   1      
 165   1              P2M0 = 0x00;
 166   1          P2M1 = 0x00;
 167   1          
 168   1          key = 0;
 169   1          if(P24 == 0) 
 170   1              {
 171   2                      if(P24 == 0)
 172   2                      {
 173   3                              P20 = 0;
 174   3                              key = 0xfe;
 175   3                      }
 176   2                      else 
 177   2                      {
 178   3                              P20 = 1;
C51 COMPILER V9.01   USB_REQ_CLASS                                                         08/19/2023 22:41:15 PAGE 4   

 179   3                      }
 180   2              }
 181   1              if(P25 == 0) 
 182   1              {
 183   2                      if(P25 == 0)
 184   2                      {
 185   3                              P20 = 0;
 186   3                              key = 0xfb;
 187   3                      }
 188   2                      else 
 189   2                      {
 190   3                              P20 = 1;
 191   3                      }
 192   2              }
 193   1              if(P26 == 0) 
 194   1              {
 195   2                      if(P26 == 0)
 196   2                      {
 197   3                              P20 = 0;
 198   3                              key = 0xbf;
 199   3                      }
 200   2                      else 
 201   2                      {
 202   3                              P20 = 1;
 203   3                      }
 204   2              }
 205   1              if(P27 == 0) 
 206   1              {
 207   2                      if(P27 == 0)
 208   2                      {
 209   3                              P20 = 0;
 210   3                              key = 0x7f;
 211   3                      }
 212   2                      else 
 213   2                      {
 214   3                              P20 = 1;
 215   3                      }
 216   2              }
 217   1          
 218   1          if (key != bKeyCode)
 219   1          {
 220   2              bKeyCode = key;
 221   2              bKeyDebounce = 20;
 222   2          }
 223   1          else
 224   1          {
 225   2              if (bKeyDebounce)
 226   2              {
 227   3                  bKeyDebounce--;
 228   3                  if (bKeyDebounce == 0)
 229   3                  {
 230   4                      fKeyOK = 1;
 231   4                  }
 232   3              }
 233   2          }
 234   1          
 235   1      }
 236          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    388    ----
C51 COMPILER V9.01   USB_REQ_CLASS                                                         08/19/2023 22:41:15 PAGE 5   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
