C51 COMPILER V9.01   USB_REQ_CLASS                                                         08/19/2023 22:22:54 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE USB_REQ_CLASS
OBJECT MODULE PLACED IN .\obj\usb_req_class.obj
COMPILER INVOKED BY: D:\software\keil4.0\C51\BIN\C51.EXE src\usb_req_class.c BROWSE DEBUG OBJECTEXTEND PRINT(.\obj\usb_r
                    -eq_class.lst) OBJECT(.\obj\usb_req_class.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序        */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include "stc.h"
  14          #include "usb.h"
  15          #include "usb_req_class.h"
  16          
  17          BYTE bHidIdle;
  18          BYTE bKeyCode = 0;
  19          BYTE bKeyDebounce = 0;
  20          BOOL fKeyOK;
  21          
  22          sbit LED_NUM        = P6^7;
  23          sbit LED_CAPS       = P6^6;
  24          sbit LED_SCROLL     = P6^5;
  25          
  26          void usb_req_class()
  27          {
  28   1          switch (Setup.bRequest)
  29   1          {
  30   2          case GET_REPORT:
  31   2              usb_get_report();
  32   2              break;
  33   2          case SET_REPORT:
  34   2              usb_set_report();
  35   2              break;
  36   2          case GET_IDLE:
  37   2              usb_get_idle();
  38   2              break;
  39   2          case SET_IDLE:
  40   2              usb_set_idle();
  41   2              break;
  42   2          case GET_PROTOCOL:
  43   2              usb_get_protocol();
  44   2              break;
  45   2          case SET_PROTOCOL:
  46   2              usb_set_protocol();
  47   2              break;
  48   2          default:
  49   2              usb_setup_stall();
  50   2              return;
  51   2          }
  52   1      }
  53          
  54          void usb_get_report()
C51 COMPILER V9.01   USB_REQ_CLASS                                                         08/19/2023 22:22:54 PAGE 2   

  55          {
  56   1          if ((DeviceState != DEVSTATE_CONFIGURED) ||
  57   1              (Setup.bmRequestType != (IN_DIRECT | CLASS_REQUEST | INTERFACE_RECIPIENT)))
  58   1          {
  59   2              usb_setup_stall();
  60   2              return;
  61   2          }
  62   1      
  63   1          Ep0State.pData = UsbBuffer;
  64   1          Ep0State.wSize = Setup.wLength;
  65   1      
  66   1          usb_setup_in();
  67   1      }
  68          
  69          void usb_set_report()
  70          {
  71   1          if ((DeviceState != DEVSTATE_CONFIGURED) ||
  72   1              (Setup.bmRequestType != (OUT_DIRECT | CLASS_REQUEST | INTERFACE_RECIPIENT)))
  73   1          {
  74   2              usb_setup_stall();
  75   2              return;
  76   2          }
  77   1      
  78   1          Ep0State.pData = UsbBuffer;
  79   1          Ep0State.wSize = Setup.wLength;
  80   1      
  81   1          usb_setup_out();
  82   1      }
  83          
  84          void usb_get_idle()
  85          {
  86   1          if ((DeviceState != DEVSTATE_CONFIGURED) ||
  87   1              (Setup.bmRequestType != (IN_DIRECT | CLASS_REQUEST | INTERFACE_RECIPIENT)))
  88   1          {
  89   2              usb_setup_stall();
  90   2              return;
  91   2          }
  92   1      
  93   1          Ep0State.pData = &bHidIdle;
  94   1          Ep0State.wSize = 1;
  95   1      
  96   1          usb_setup_in();
  97   1      }
  98          
  99          void usb_set_idle()
 100          {
 101   1          if ((DeviceState != DEVSTATE_CONFIGURED) ||
 102   1              (Setup.bmRequestType != (OUT_DIRECT | CLASS_REQUEST | INTERFACE_RECIPIENT)))
 103   1          {
 104   2              usb_setup_stall();
 105   2              return;
 106   2          }
 107   1      
 108   1          bHidIdle = Setup.wValueH;
 109   1      
 110   1          usb_setup_status();
 111   1      }
 112          
 113          void usb_get_protocol()
 114          {
 115   1          usb_setup_stall();
 116   1      }
C51 COMPILER V9.01   USB_REQ_CLASS                                                         08/19/2023 22:22:54 PAGE 3   

 117          
 118          void usb_set_protocol()
 119          {
 120   1          usb_setup_stall();
 121   1      }
 122          
 123          void usb_class_out()
 124          {
 125   1          BYTE led;
 126   1          
 127   1          if (usb_bulk_intr_out(UsbBuffer, 1) == 1)
 128   1          {
 129   2              P4M0 &= ~0x01;
 130   2              P4M1 &= ~0x01;
 131   2              P6M0 &= ~0xe0;
 132   2              P6M1 &= ~0xe0;
 133   2              P40 = 0;
 134   2              
 135   2              led = UsbBuffer[0];
 136   2              LED_NUM = !(led & 0x01);
 137   2              LED_CAPS = !(led & 0x02);
 138   2              LED_SCROLL = !(led & 0x04);
 139   2          }
 140   1      }
 141          
 142          void usb_class_in()
 143          {
 144   1          BYTE key[8];
 145   1          BYTE i;
 146   1          
 147   1          if (DeviceState != DEVSTATE_CONFIGURED)
 148   1              return;
 149   1      
 150   1          if (!UsbInBusy && fKeyOK)
 151   1          {
 152   2              fKeyOK = 0;
 153   2      
 154   2              key[0] = 0;
 155   2              key[1] = 0;
 156   2              key[2] = 0;
 157   2              key[3] = 0;
 158   2              key[4] = 0;
 159   2              key[5] = 0;
 160   2              key[6] = 0;
 161   2              key[7] = 0;
 162   2      
 163   2              switch (bKeyCode)
 164   2              {
 165   3              case 0xfe:  key[2] = 0x1e; break;
 166   3              case 0xfd:  key[2] = 0x1f; break;
 167   3              case 0xfb:  key[2] = 0x20; break;
 168   3              case 0xf7:  key[2] = 0x21; break;
 169   3              case 0xef:  key[2] = 0x22; break;
 170   3              case 0xdf:  key[2] = 0x23; break;
 171   3              case 0xbf:  key[2] = 0x24; break;
 172   3              case 0x7f:  key[2] = 0x25; break;
 173   3              }
 174   2              
 175   2              IE2 &= ~0x80;   //EUSB = 0;
 176   2              UsbInBusy = 1;
 177   2              usb_write_reg(INDEX, 1);
 178   2              for (i=0; i<8; i++)
C51 COMPILER V9.01   USB_REQ_CLASS                                                         08/19/2023 22:22:54 PAGE 4   

 179   2              {
 180   3                  usb_write_reg(FIFO1, key[i]);
 181   3              }
 182   2              usb_write_reg(INCSR1, INIPRDY);
 183   2              IE2 |= 0x80;    //EUSB = 1;
 184   2          }
 185   1      }
 186          
 187          void scan_key()
 188          {
 189   1          BYTE key;
 190   1          
 191   1          P0M0 = 0x00;
 192   1          P0M1 = 0x00;
 193   1              P2M0 = 0x00;    
 194   1              P2M1 = 0x00;
 195   1          
 196   1          key = 0;
 197   1          if(P24 == 0) 
 198   1              {
 199   2                      if(P24 == 0)
 200   2                      {
 201   3                              P20 = 0;
 202   3                              key = 0xfe;
 203   3                      }
 204   2                      else 
 205   2                      {
 206   3                              P20 = 1;
 207   3                      }
 208   2              }
 209   1              if(P25 == 0) 
 210   1              {
 211   2                      if(P25 == 0)
 212   2                      {
 213   3                              P20 = 0;
 214   3                              key = 0xfd;
 215   3                      }
 216   2                      else 
 217   2                      {
 218   3                              P20 = 1;
 219   3                      }
 220   2              }
 221   1              if(P26 == 0) 
 222   1              {
 223   2                      if(P26 == 0)
 224   2                      {
 225   3                              P20 = 0;
 226   3                              key = 0xfb;
 227   3                      }
 228   2                      else 
 229   2                      {
 230   3                              P20 = 1;
 231   3                      }
 232   2              }
 233   1              if(P27 == 0) 
 234   1              {
 235   2                      if(P27 == 0)
 236   2                      {
 237   3                              P20 = 0;
 238   3                              key = 0xf7;
 239   3                      }
 240   2                      else 
C51 COMPILER V9.01   USB_REQ_CLASS                                                         08/19/2023 22:22:54 PAGE 5   

 241   2                      {
 242   3                              P20 = 1;
 243   3                      }
 244   2              }
 245   1          
 246   1          if (key != bKeyCode)
 247   1          {
 248   2              bKeyCode = key;
 249   2              bKeyDebounce = 20;
 250   2          }
 251   1          else
 252   1          {
 253   2              if (bKeyDebounce)
 254   2              {
 255   3                  bKeyDebounce--;
 256   3                  if (bKeyDebounce == 0)
 257   3                  {
 258   4                      fKeyOK = 1;
 259   4                  }
 260   3              }
 261   2          }
 262   1          
 263   1      }
 264          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    467    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
